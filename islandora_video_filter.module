<?php

/**
 * @file
 * Implementation of the Islandora video filter.
 */

/**
 * Implements hook_codec_info()
 *
 * @return array
 */
function islandora_video_filter_codec_info() {
  $codecs = array();
  $pid_regex = "\b([A-Za-z0-9]|-|\.)+:(([A-Za-z0-9])|-|\.|~|_|(%[0-9A-F]{2}))+\b";
  // You can offer multiple video formats in one module.
  $codecs['islandora_video'] = array(
    // Will be used some day in user information.
    'name' => t('Islandora'),

    // Special instructions for end users. Optional.
    'instructions' => t('Use a url to an islandora video object\'s MP4 datastream.'),

    // We currently have two html5 implementations as this below also does html5
    'callback' => 'islandora_video_filter_html5',

    // HTML5 callback, for returning something that's device agnostic.
    // Here we use a videojs version
    'html5_callback' => 'islandora_video_filter_html5',

    // Regexp can be an array. $video['codec']['delta'] will be set to the key.
   'regexp' => array(
      '/' . preg_quote($_SERVER['HTTP_HOST']) . '.*\/islandora\/object\/' . $pid_regex . '\/datastream\/MP4\/view/',
      '/' . preg_quote($_SERVER['HTTP_HOST']) . '.*\/islandora\/object\/' . $pid_regex . '\/datastream\/PROXY_MP3\/view/',
    ),

    // Ratio for resizing within user-given width and height (ratio = width / height)
    'ratio' => 620 / 400, //16 / 9,
  );
  return $codecs;
}

/**
 * Implements hook_node_view_alter().
 *
 * Adds video js javascript.  These js librarires should have been installed
 * with the islandora_videojs module.
 *
 * We add the javascript here as Drupal caches the filter stuff so our
 * callback may not actually be called when a node is viewed.
 *
 * We check for a
 * format that that includes the word video.  So text formats for use with the
 * islandora_video_filter should include the word video if you want the videojs
 * javascript to be loaded.  If the videojs javascript is not loaded you will
 * end up with a normal html5 video or audio tag
 *
 * @param array $build
 *   A renderable array representing the node content.
 */
function islandora_video_filter_node_view_alter(&$build) {
  // TODO find a better way to get filter information
  // TODO do we want to filter on something other than the word video? (islandora?)
  //$format = $build['body']['#items'][0]['format'];
  if(!empty($build['body']['#items'])) {
    foreach ($build['body']['#items'] as $item) {
      if (isset($item['format']) && stristr($item['format'], 'video')) {
        $videojs_path = libraries_get_path("video-js");
        drupal_add_js($videojs_path . "/video.js");
        drupal_add_css($videojs_path . '/video-js.css');
      }
    }
  }
}

/**
 * A callback function for the video_filter module. Outputs a html5 video or audio element.
 *
 * @param array $video
 *   An array created bye the video_filter module
 * @return string
 *   A renderable string
 */
function islandora_video_filter_html5($media) {
  $media_url =  $media['source'];
  return islandora_video_filter_is_audio($media_url) ?
    islandora_video_filter_build_audio($media, $media_url) :
    islandora_video_filter_build_video($media, $media_url);


}

/**
 * Returns a html5 video element wrapped by videojs if the videojs javascript is loaded.
 *
 * The videojs javascript will be loaded if the text format identifier includes either
 * video
 *
 * @param $video
 * @param $video_url
 * @return string
 *   A renderable string
 */
function islandora_video_filter_build_video($video, $video_url) {
  $poster_url = islandora_video_filter_tn_url($video_url);
  $video_id = str_replace(':', '-', islandora_video_filter_get_pid($video_url)) . '-video';
  $video_width = $video['width'];
  $video_height = $video['height'];
  $data_setup = empty($video['autoplay']) ? '{"preload": "true"}'
    : '{"preload": "true", "autoplay": "true"}' ;
  // removed line breaks in video tag to try and stop some drupal filters from breaking our filter
  $output =
    <<<TAG
  <video id="$video_id" class="video-js vjs-default-skin" controls preload="auto" height="$video_height" width="$video_width" poster="$poster_url" data-setup='$data_setup'><source src="$video_url" type='video/mp4'/></video>
TAG;
  return $output;
}

/**
 * Returns an html5 audio element
 *
 * If using a version videojs below 4.9 height, width and autoplay
 * will be ignored.
 *
 * @param $audio
 * @param $audio_url
 * @return string
 *   A renderable string
 */
function islandora_video_filter_build_audio($audio, $audio_url) {
  $poster_url = islandora_video_filter_tn_url($audio_url);
  $audio_id = str_replace(':', '-', islandora_video_filter_get_pid($audio_url)) . '-audio';
  $audio_width = $audio['width'];
  $audio_height = $audio['height'];
  $data_setup = empty($audio['autoplay']) ? '{}'
    : '{"autoplay": "true"}' ;
  $autoplay = empty($video['autoplay']) ? ""
    : "autoplay";

    $output = <<<TAG
  <audio id="$audio_id" class="video-js vjs-default-skin" controls preload="auto" height="$audio_width" width="$audio_height" poster="$poster_url" data-setup='$data_setup'><source src="$audio_url" type='audio/mp3'/></audio>
TAG;
  return $output;
}


/**
 * Parses the source url and returns a modified version that resolves to the TN
 * datastream.
 *
 * @param string $mdeia_url
 *   An Islandora video (MP4) or audio (PROXY_MP3) source url
 * @return mixed
 */
function islandora_video_filter_tn_url($media_url) {
  // TODO check for missing TNs
  $tn_url =  islandora_video_filter_is_audio($media_url) ?
    str_replace('PROXY_MP3/view', 'TN', $media_url) :
    str_replace('MP4/view', 'TN', $media_url);
  return $tn_url;
}

/**
 * Parses the video source url to return just the pid portion.
 *
 * @param string $video_url
 * @return mixed|string
 *   The pid.
 */
function islandora_video_filter_get_pid($media_url) {
  $id = substr($media_url, strpos($media_url, '/islandora/object/') + strlen('/islandora/object/'));
  $id = islandora_video_filter_is_audio($media_url) ?
    str_replace('/datastream/PROXY_MP3/view', '', $id) :
    str_replace('/datastream/MP4/view', '', $id);
  return $id;
}

/**
 * Check if this is an islandora audio datastream url.
 *
 * @param string $media_url
 *
 * @return bool
 *   TRUE if this is a PROXY_MP3 url.  FALSE otherwise.
 */
function islandora_video_filter_is_audio($media_url) {
  return  (strstr($media_url, 'PROXY_MP3') === FALSE) ? FALSE : TRUE;
}
